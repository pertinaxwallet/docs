"use strict";(self.webpackChunkeverscale_docs_website=self.webpackChunkeverscale_docs_website||[]).push([[1323],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),f=o,h=p["".concat(i,".").concat(f)]||p[f]||u[f]||s;return n?a.createElement(h,r(r({ref:t},d),{},{components:n})):a.createElement(h,r({ref:t},d))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,r=new Array(s);r[0]=p;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var c=2;c<s;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9925:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return i},default:function(){return f},frontMatter:function(){return l},metadata:function(){return c},toc:function(){return u}});var a=n(3117),o=n(102),s=(n(7294),n(3905)),r=["components"],l={sidebar_position:1},i="Add EVER to your Exchange",c={unversionedId:"develop/integrate/tutorial/add-everscale-to-your-exchange",id:"develop/integrate/tutorial/add-everscale-to-your-exchange",title:"Add EVER to your Exchange",description:"Introduction",source:"@site/../../src/develop/integrate/tutorial/add-everscale-to-your-exchange.md",sourceDirName:"develop/integrate/tutorial",slug:"/develop/integrate/tutorial/add-everscale-to-your-exchange",permalink:"/develop/integrate/tutorial/add-everscale-to-your-exchange",draft:!1,editUrl:"https://github.com/everscale-org/docs/edit/main/.build/website/../../src/develop/integrate/tutorial/add-everscale-to-your-exchange.md",tags:[],version:"current",lastUpdatedAt:1658794573,formattedLastUpdatedAt:"Jul 26, 2022",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/develop/integrate/tutorial/getting-started"},next:{title:"How to read Network details",permalink:"/develop/integrate/tutorial/how-to-read-network-details"}},d={},u=[{value:"Introduction",id:"introduction",level:3},{value:"Setting up Blockchain Access",id:"setting-up-blockchain-access",level:3},{value:"Using EVER OS Cloud",id:"using-ever-os-cloud",level:4},{value:"Using DApp Server",id:"using-dapp-server",level:4},{value:"Using command line tool",id:"using-command-line-tool",level:4},{value:"Using SDK",id:"using-sdk",level:4},{value:"Using command line tool",id:"using-command-line-tool-1",level:4},{value:"(Optional) Confirm transaction",id:"optional-confirm-transaction",level:4},{value:"Mitigating risks of token loss due to user error**",id:"mitigating-risks-of-token-loss-due-to-user-error",level:4},{value:"PIN code verification",id:"pin-code-verification",level:4},{value:"Using SDK",id:"using-sdk-1",level:4},{value:"User account verification with SDK",id:"user-account-verification-with-sdk",level:4}],p={toc:u};function f(e){var t=e.components,n=(0,o.Z)(e,r);return(0,s.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"add-ever-to-your-exchange"},"Add EVER to your Exchange"),(0,s.kt)("h3",{id:"introduction"},"Introduction"),(0,s.kt)("p",null,"This document describes the various ways to accomplish the most important tasks of running a crypto exchange that supports EVER. "),(0,s.kt)("p",null,"There are a few different ways to accomplish the necessary tasks:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Blockchain access")," may be set up either through the  EVER OS cloud or through your own node - the DApp server.")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("p",{parentName:"li"},(0,s.kt)("strong",{parentName:"p"},"Deposit account management")," can be accomplished either through the TONOS-CLI command line tool or integrated into your backend with TON SDK. Both of these approaches are compatible with either of the blockchain access setups."))),(0,s.kt)("h3",{id:"setting-up-blockchain-access"},"Setting up Blockchain Access"),(0,s.kt)("p",null,"There are two ways you can set up access to the Everscale blockchain: you may use EVER OS Cloud, or set up your own DApp server."),(0,s.kt)("h4",{id:"using-ever-os-cloud"},"Using EVER OS Cloud"),(0,s.kt)("p",null,"EVER OS Cloud allows you to work with Everscale blockchain and the Development Network without having to run your own node. TONOS-CLI and SDK can connect to it, as if it were a regular node. It has the same API as a node, and provides all capabilities required for running an exchange."),(0,s.kt)("p",null,"This page lists the endpoints for both clouds."),(0,s.kt)("p",null,"Whenever you have to specify a network in the examples given below, you may use them."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note:")," We highly recommend testing out the full setup on the developer network first."),(0,s.kt)("h4",{id:"using-dapp-server"},"Using DApp Server"),(0,s.kt)("p",null,"If you prefer to run your own node, rather than using EVER OS Cloud, you may set up your own DApp server. It is a full node, that may be set up on your own servers and provide full access to either Everscale or the Developer network. To connect to to it with TONOS-CLI or SDK, it needs to have a domain name and a DNS record. You can specify its URL whenever you have to set the network in the examples given below."),(0,s.kt)("p",null,"Get the setup scripts in this repository: ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/tonlabs/TON-OS-DApp-Server"},"https://github.com/tonlabs/TON-OS-DApp-Server")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"1. System Requirements")),(0,s.kt)("p",null,"CPU (cores) - 24"),(0,s.kt)("p",null,"RAM (GiB) - 192"),(0,s.kt)("p",null,"Storage (GiB) - 2000"),(0,s.kt)("p",null,"Network (Gbit/s) - 1"),(0,s.kt)("p",null,"SSD disks are recommended for storage."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"2. Prerequisites")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"2.1 Set the Environment")),(0,s.kt)("p",null,"Set the network in /scripts/env.sh: use main.ton.dev for the main network and net.ton.dev for the developer network."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note:")," We highly recommend testing out the full setup on the developer network first."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ cd TON-OS-DApp-Server/scripts/\n$ . ./env.sh\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"2.2 Install Dependencies")),(0,s.kt)("p",null,"Ubuntu 20.04:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ ./install_deps.sh\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note:")," Make sure to add your user to the docker group, or run deploy command as superuser:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"sudo usermod -a -G docker $USER\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"3. Deploy Node")),(0,s.kt)("p",null,"Deploy node:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ ./deploy.sh 2>&1 | tee ./deploy.log\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note:")," the log generated by this command will be located in the TON-OS-DApp-Server/scripts/ folder and can be useful for troubleshooting."),(0,s.kt)("p",null,"###Setting up Deposit Account"),(0,s.kt)("p",null,"Currently we can recommend the formally verified SafeMultisig contract for use in deposit accounts. It is well tested and secure, supports multiple custodians, and can be set up to require several independent signatures for any transfers. However it has certain limitations, that may prove problematic for exchanges: it is not possible to send tokens transfers in batches to multiple addresses."),(0,s.kt)("p",null,"If this functionality is required, you can develop a contract with the needed capabilities or get one developed by someone in the Everscale community."),(0,s.kt)("h4",{id:"using-command-line-tool"},"Using command line tool"),(0,s.kt)("p",null,"TONOS-CLI, the command line tool for the Everscale blockchain, allows to deploy any smart contracts to the blockchain, call all contract methods, sign transactions, and generally manage an account."),(0,s.kt)("p",null,"TONOS-CLI has versions for Linux, Windows and Mac."),(0,s.kt)("p",null,"It supports the EVER OS cloud and DApp server-based approaches both."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"1. Install TONOS-CLI")),(0,s.kt)("p",null,"You can use EVERDEV to install the latest version of TONOS-CLI:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"everdev tonos-cli install\n")),(0,s.kt)("p",null,"The installer requires NPM to be installed, so it can install packages globally without using sudo. In case of error, manually set the environment variable"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"PATH=$PATH:$HOME./everdev/solidity\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"2. Set the network")),(0,s.kt)("p",null,"Use the following command to set the network:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"tonos-cli config --url <https://network_url>\n")),(0,s.kt)("p",null,"You may specify either your DApp Server URL, or one of the cloud endpoints:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"developer network for testing with test tokens. By default, TONOS-CLI connects to the developer network. We highly recommend testing out the full setup on this network first."),(0,s.kt)("li",{parentName:"ul"},"main Everscale network. Switch to it for working with EVERS.")),(0,s.kt)("p",null,"Refer to this list for network URLs."),(0,s.kt)("p",null,"You need to set the network only once before you start using the utility."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"Note:")," You should run the TONOS-CLI utility only from the folder where the tonos-cli.conf.json file is located."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"3. Get contract files")),(0,s.kt)("p",null,"To use the recommended SafeMultisig, get the contract files:"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},".tvc")," - Compiled contract code"),(0,s.kt)("p",null,"SafeMultisigWallet.abi.json direct link:"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://raw.githubusercontent.com/tonlabs/ton-labs-contracts/master/solidity/safemultisig/SafeMultisigWallet.abi.json"},"https://raw.githubusercontent.com/tonlabs/ton-labs-contracts/master/solidity/safemultisig/SafeMultisigWallet.abi.json")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},".abi.json")," - application binary interface, describing the functions of the contract"),(0,s.kt)("p",null,"SafeMultisigWallet.tvc direct link:"),(0,s.kt)("p",null,(0,s.kt)("a",{parentName:"p",href:"https://github.com/tonlabs/ton-labs-contracts/raw/master/solidity/safemultisig/SafeMultisigWallet.tvc"},"https://github.com/tonlabs/ton-labs-contracts/raw/master/solidity/safemultisig/SafeMultisigWallet.tvc")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"4. Create account seed phrase")),(0,s.kt)("p",null,"To generate your seed phrase enter the following command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"tonos-cli genphrase\n")),(0,s.kt)("p",null,"Terminal displays the generated seed phrase:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'$ tonos-cli genphrase\nConfig: default\nSucceeded.\nSeed phrase: "spoon doll recipe regular list window cage joke stock clown mass glare"\n')),(0,s.kt)("p",null,"If the deposit account needs to have multiple custodians, each of them has to generate their own seed phrase."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"5. Generate public key")),(0,s.kt)("p",null,"To generate your public key enter the following command with your previously generated seed phrase in quotes:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'tonos-cli genpubkey "<seed_phrase>"\n')),(0,s.kt)("p",null,"If the deposit account needs to have several custodians, each of them should generate their public key and send it to whomever will be deploying the account."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'$ tonos-cli genpubkey "spoon doll recipe regular list window cage joke stock clown mass glare"\nConfig: default\nSucceeded.\nPublic key: 352a248222c18d5c87d0e998d3c44ab324d21578f4068028af9b49005d2c9859\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"6. Generate deployment key pair file")),(0,s.kt)("p",null,"Any custodian who has received the public keys of all other custodians can deploy the contract to the blockchain."),(0,s.kt)("p",null,"To create the key pair file from the seed phrase use the following command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'tonos-cli getkeypair <deploy.keys.json> "<seed_phrase>"\n')),(0,s.kt)("p",null,"deploy.keys.json - the file the key pair will be written to."),(0,s.kt)("p",null,"The utility generates the file that contains the key pair produced from seed phrase."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'$ tonos-cli getkeypair deploy.keys.json "spoon doll recipe regular list window cage joke stock clown mass glare"\nConfig: default\nInput arguments:\nkey_file: deploy.keys.json\n    phrase: spoon doll recipe regular list window cage joke stock clown mass glare\nSucceeded.\n')),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"7. Generate account address")),(0,s.kt)("p",null,"Use deployment key pair file to generate your address:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"tonos-cli genaddr SafeMultisigWallet.tvc SafeMultisigWallet.abi.json --setkey <deploy.keys.json>\n")),(0,s.kt)("p",null,"deploy.keys.json - the file the key pair is read from."),(0,s.kt)("p",null,"The utility displays the new deposit account address (Raw address)."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ tonos-cli genaddr SafeMultisigWallet.tvc SafeMultisigWallet.abi.json --setkey deploy.keys.json\nConfig: default\nInput arguments:\n     tvc: SafeMultisigWallet.tvc\n      wc: None\n    keys: deploy.keys.json\ninit_data: None\nis_update_tvc: None\n\nRaw address: 0:703546ac78f2b9d58f1072d131ff9fc23f29aeddcc85fd30bcba64f475b306a2\ntestnet:\nNon-bounceable address (for init): 0QBwNUasePK51Y8QctEx_5_CPymu3cyF_TC8umT0dbMGot4F\nBounceable address (for later access): kQBwNUasePK51Y8QctEx_5_CPymu3cyF_TC8umT0dbMGooPA\nmainnet:\nNon-bounceable address (for init): UQBwNUasePK51Y8QctEx_5_CPymu3cyF_TC8umT0dbMGomWP\nBounceable address (for later access): EQBwNUasePK51Y8QctEx_5_CPymu3cyF_TC8umT0dbMGojhK\nSucceeded\n")),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"8. Send tokens to the new address from another account")),(0,s.kt)("p",null,"Before deployment, an account needs to be sponsored with a small amount of tokens. You may use any convenient method to send tokens to the calculated address. For example, sending tokens from multisig wallets through TONOS-CLI is described here. Note, that if the wallet has multiple custodians, the transaction may require confirmation from the other custodians."),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"9. Deploy the contract to blockchain")),(0,s.kt)("p",null,"Use the following command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'tonos-cli deploy SafeMultisigWallet.tvc \'{"owners":["0x...", ...],"reqConfirms":N}\' --abi SafeMultisigWallet.abi.json --sign <deploy_seed_or_keyfile>\n')),(0,s.kt)("p",null,"Configuration parameters:"),(0,s.kt)("p",null,"owners - array of custodian public keys generated by all account custodians at step 5 as uint256 numbers. Make sure all public keys are enclosed in quotes and start with 0x...."),(0,s.kt)("p",null,"Example of how to specify custodian keys: "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'"owners":["0x8868adbf012ebc349ced852fdcf5b9d55d1873a68250fae1be609286ddb962582","0xa0e16ccff0c7bf4f29422b33ec1c9187200e9bd949bb2dd4c7841f5009d50778a"]\n')),(0,s.kt)("p",null,"reqConfirms - number of signatures needed to confirm a transaction ( 0 < N \u2264 custodian count). For accounts with a single custodian set reqConfirms:1"),(0,s.kt)("p",null,"deploy_seed_or_keyfile - can either be the seed phrase used in step 6 to generate the deployment key pair file or the deploy.keys.json file itself. If seed phrase is used, enclose it in double quotes."),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'$ tonos-cli deploy --sign deploy.keys.json --abi SafeMultisigWallet.abi.json SafeMultisigWallet.tvc \'{"owners":["0x88c541e9a1c173069c89bcbcc21fa2a073158c1bd21ca56b3eb264bba12d9340"],"reqConfirms":1}\'\nConfig: /home/user/tonos-cli.conf.json\nInput arguments:\n     tvc: SafeMultisigWallet.tvc\n  params: {"owners":["0x88c541e9a1c173069c89bcbcc21fa2a073158c1bd21ca56b3eb264bba12d9340"],"reqConfirms":1}\n     abi: SafeMultisigWallet.abi.json\n    keys: deploy.keys.json\n      wc: 0\nConnecting to net.ton.dev\nDeploying...\nTransaction succeeded.\nContract deployed at address: 0:703546ac78f2b9d58f1072d131ff9fc23f29aeddcc85fd30bcba64f475b306a2\n')),(0,s.kt)("h4",{id:"using-sdk"},"Using SDK"),(0,s.kt)("p",null,"You may integrate above described process of deposit account deployment into your exchange backend. The functionality is supported in SDK. "),(0,s.kt)("p",null,"A sample is available in this repository and an overview is given below."),(0,s.kt)("p",null,"Bindings for a large number of languages have been developed for SDK.\nNote, that similar to the TONOS-CLI approach described above, you have to sponsor a deposit account before deploying contract code. The sample requires you to input the data for a preexisting multisig account on the developer network to server as a giver. "),(0,s.kt)("p",null,"The recommended SafeMultisig contract is used."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'async function main(client) {\n\n  // \u0421onfigures the specified multisig wallet as a wallet to sponsor deploy operation\n  // Read more about deploy and other basic concepts here https://ton.dev/faq/blockchain-basic\n     const giver = await ensureGiver(client);\n    \n  \n\n  console.log("Generate new wallet keys");\n  const walletKeys = await client.crypto.generate_random_sign_keys();\n    \n  const wallet = await getAccount(client, SafeMultisigContract, signerKeys(walletKeys));\n  const walletAddress = wallet.address;\n    \n\n  const startBlockTime = seconds(Date.now());\n    \n  console.log(`Sending deploy fee from giver wallet ${giver.address} to the new wallet at ${walletAddress}`);\n await depositAccount(walletAddress, 2000000000, client);\n  \n console.log(`Deploying new wallet at ${walletAddress}ions\n await deployAccount(wallet,  {\n         owners: [`0x${walletKeys.public}`], // constructor parameters of multisig\n         reqConfirms: 1,\n        });\n    \n \n  console.log("Depositing 2 tokens...");\n  await depositAccount(walletAddress, 2000000000, client);\n        \n  const giverAddress = await giver.address;\n  console.log(`Withdrawing 2 tokens from ${wallet.walletAddress} to ${giverAddress}...`);\n  await walletWithdraw(wallet, giverAddress, 1000000000);\n        \n   console.log(`Transactions for ${walletAddress} account since ${startBlockTime}`);\n  let result = await queryAccountTransactions(client, walletAddress, {\n                startTime: startBlockTime,\n                // endTime: endBlockTime,     // You can set an upper time boundary @endTime to 2 minutes before now \u2013 to avoid data eventually consistency.\n        \n      \n            });\n   const countLimit = 200;\n   let count = 0;\n   while (count < countLimit && result.transactions.length > 0) {\n          for (const transaction of result.transactions) {\n              printTransfers(transaction);\n              count += 1;\n             } \n        result = await queryAccountTransactions(client, walletAddress, {\n                        after: result.last,\n                    });\n                }\n\n  console.log(`Transactions of all accounts since ${startBlockTime}`);\n  result = await queryAllTransactions(client, {\n                        startTime: startBlockTime,\n                        endTime: seconds(Date.now()) - 20, // we use 20 so that we catch the transactions generated in this sample. Replace with 120.\n                    });\n  count = 0;\n  while (count < countLimit && result.transactions.length > 0) {\n    for (const transaction of result.transactions) {\n        printTransfers(transaction);\n        count += 1;\n    }\n    result = await queryAllTransactions(client, {\n                    after: result.last,\n                    endTime: seconds(Date.now()) - 20\n                });\n     }\n  }\n  \n')),(0,s.kt)("p",null,"###Monitoring Deposit Account"),(0,s.kt)("p",null,"An exchange needs to reliably know when customers deposit funds into its exchange accounts. This functionality has been integrated into SDK. A sample is available in this repository and an overview of the relevant part is given below."),(0,s.kt)("p",null,"In this sample  JS SDK is used. Bindings for a large number of languages have been developed for SDK.\nThe script iterates over all blocks since the specified time and looks for transfers according to the set up filters. Transfers may be filtered by one or all accounts. "),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"...    \nconsole.log(`Transactions of all accounts since ${startBlockTime}`);\n        result = await queryAllTransactions(client, {\n            startTime: startBlockTime,\n            endTime: seconds(Date.now()) - 20, // we use 20 so that we catch the transactions generated in this sample. Replace with 120.\n        });\n        count = 0;\n        while (count < countLimit && result.transactions.length > 0) {\n            for (const transaction of result.transactions) {\n                printTransfers(transaction);\n                count += 1;\n            }\n            result = await queryAllTransactions(client, {\n                after: result.last,\n                endTime: seconds(Date.now()) - 20, // we use 20 so that we catch the transactions generated in this sample. Replace with 120.\n            });\n        }\n\n...\n")),(0,s.kt)("p",null,"You may test out the demo application running this process on the developer network by cloning the sdk-samples repository, and running the following commands in the /demo/exchange folder:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"npm i\nnode index\n")),(0,s.kt)("p",null,"Prerequisites: latest Node.js"),(0,s.kt)("p",null,"###Withdrawing from deposit accounts"),(0,s.kt)("p",null,"The specific function that is used to send the funds to the user depends on the contract chosen for the deposit account. Below are provided the examples for the SafeMultisig contract."),(0,s.kt)("h4",{id:"using-command-line-tool-1"},"Using command line tool"),(0,s.kt)("p",null,"TONOS-CLI tool may be used to implement withdrawals from deposit account."),(0,s.kt)("p",null,"The simplest way that bypasses any verification and places all risks entirely on the user is to send the full requested amount with a single transfer to the specified address. If the user made a mistake in the address, and has no control over it, these funds will be lost. If the account does not exist, and the user makes mistakes deploying it after the funds are transferred, they may end up being lost as well."),(0,s.kt)("p",null,"To perform a simple transfer to any account, whether it already exists or not, use the following TONOS-CLI command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'tonos-cli call <deposit_account_address> submitTransaction \'{"dest":"recipient_address","value":<nanotokens>,"bounce":false,"allBalance":false,"payload":""}\' --abi SafeMultisigWallet.abi.json --sign <seed_or_keyfile>\n')),(0,s.kt)("p",null,'"recipient_address" - raw address of the recipient smart contract. Example: "0:f22e02a1240dd4b5201f8740c38f2baf5afac3cedf8f97f3bd7cbaf23c7261e3"'),(0,s.kt)("p",null,'"value":nanotokens - amount of tokens to transfer in nanotokens (Example: "value":10000000000 sets up a transfer of 10 tokens).'),(0,s.kt)("p",null,'"bounce" - use false to transfer funds to any account regardless of whether it exists.'),(0,s.kt)("p",null,'"payload" - use "" for simple transfer.'),(0,s.kt)("p",null,'"allBalance" - used to transfer all funds in the wallet. Use false for a simple transfer.'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'Note: Due to a bug setting allBalance to true currently causes errors. Single-custodian multisig wallets may use sendTransaction method with flag 130 and value 0 instead:\ntonos-cli call <multisig_address> sendTransaction \'{"dest":"raw_address","value":0,"bounce":true,"flags":130,"payload":""}\' --abi <MultisigWallet.abi.json> --sign <seed_or_keyfile>\n<seed_or_keyfile> - can either be the custodian seed phrase or the corresponding custodian key pair file. If seed phrase is used, enclose it in double quotes.\n')),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'--sign "flip uncover dish sense hazard smile gun mom vehicle chapter order enact"\n')),(0,s.kt)("p",null,"or"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"--sign keyfile.json\n")),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'$ tonos-cli call 0:a4629d617df931d8ad86ed24f4cac3d321788ba082574144f5820f2894493fbc submitTransaction \'{"dest":"0:0c5d5215317ec8eef1b84c43cbf08523c33f69677365de88fe3d96a0b31b59c6","value":234000000,"bounce":false,"allBalance":false,"payload":""}\' --abi SafeMultisigWallet.abi.json --sign k1.keys.json\nConfig: /home/user/tonos-cli.conf.json\nInput arguments:\n address: 0:a4629d617df931d8ad86ed24f4cac3d321788ba082574144f5820f2894493fbc\n  method: submitTransaction\n  params: {"dest":"0:0c5d5215317ec8eef1b84c43cbf08523c33f69677365de88fe3d96a0b31b59c6","value":234000000,"bounce":false,"allBalance":false,"payload":""}\n     abi: SafeMultisigWallet.abi.json\n    keys: k1.keys.json\nlifetime: None\n  output: None\nConnecting to net.ton.dev\nGenerating external inbound message...\n\nMessageId: c6baac843fefe6b9e8dc3609487a63ef21207e4fdde9ec253b9a47f7f5a88d01\nExpire at: Sat, 08 May 2021 14:52:23 +0300\nProcessing... \nSucceeded.\nResult: {\n  "transId": "6959885776551137793"\n}\n')),(0,s.kt)("p",null,"Note, that if your deposit account has multiple custodians, the transaction has to be confirmed by the required number of signatures to be executed. In this case transaction ID will be displayed as transaction result, when creating it. This transaction ID should be communicated to other custodians, who should use it to confirm the transaction."),(0,s.kt)("h4",{id:"optional-confirm-transaction"},"(Optional) Confirm transaction"),(0,s.kt)("p",null,"To confirm a transaction, use the following command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'tonos-cli call <deposit_account_address> confirmTransaction \'{"transactionId":"<id>"}\' --abi SafeMultisigWallet.abi.json --sign <seed_or_keyfile>\n')),(0,s.kt)("p",null,"transactionId \u2013 the ID of the transaction can be acquired from the custodian who created it."),(0,s.kt)("p",null,"seed_or_keyfile - can either be the custodian seed phrase or the corresponding custodian key pair file. If seed phrase is used, enclose it in double quotes."),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'--sign "flip uncover dish sense hazard smile gun mom vehicle chapter order enact"\n')),(0,s.kt)("p",null,"or"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"--sign keyfile.json\n")),(0,s.kt)("p",null,"Basic checks of the address format will be performed by the TONOS-CLI utility automatically, only addresses of a valid Everscale format will be accepted."),(0,s.kt)("h4",{id:"mitigating-risks-of-token-loss-due-to-user-error"},"Mitigating risks of token loss due to user error**"),(0,s.kt)("p",null,"The are two main cases regarding transfers to user accounts: a user may already have an active account to which they want to withdraw funds, or they may want to withdraw funds to a completely new account, that doesn't exist at the time withdraw is requested."),(0,s.kt)("p",null,"The status of the account provided by the user may be checked with the following TONOS-CLI command:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"tonos-cli account <accound_address>\n")),(0,s.kt)("p",null,"Example of existing account:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ tonos-cli account 0:255a3ad9dfa8aa4f3481856aafc7d79f47d50205190bd56147138740e9b177f3\nConfig: default\nInput arguments:\n address: 0:255a3ad9dfa8aa4f3481856aafc7d79f47d50205190bd56147138740e9b177f3\nConnecting to <https://net.ton.dev>\nProcessing...\nSucceeded.\nacc_type:      Active\nbalance:       542692817630\nlast_paid:     1622198835\nlast_trans_lt: 0x50cef81af04\ndata(boc): b5ee9c720101020100980001df8534c46f7a135058773fa1298cb3a299a5ddd40dafe41cb06c64f274da360bfb00000179b295c60dc29a6237bd09a82c3b9fd094c659d14cd2eeea06d7f20e583632793a6d1b05fd80000000000000000000000000000000000000000000000000000000000000002020000000001018010045a010a6988def426a0b0ee7f4253196745334bbba81b5fc83960d8c9e4e9b46c17f6010\ncode_hash: 207dc560c5956de1a2c1479356f8f3ee70a59767db2bf4788b1d61ad42cdad82\n")),(0,s.kt)("p",null,"Example of account that doesn't exist yet:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},"$ tonos-cli account 0:255a3ad9dfa8aa4f3481856aafc7d79f47d50205190bd56147138740e9b177f4\nConfig: default\nInput arguments:\n address: 0:255a3ad9dfa8aa4f3481856aafc7d79f47d50205190bd56147138740e9b177f4\nConnecting to <https://net.ton.dev>\nProcessing...\nSucceeded.\nAccount not found.\n")),(0,s.kt)("p",null,"The possible results are the following:"),(0,s.kt)("p",null,"Account not found - account does not exist. It needs to be sponsored, then deployed, and only then will it be active."),(0,s.kt)("p",null,"acc_type: Uninit - account already has some funds on it but contract code has not been deployed yet. User needs to deploy it."),(0,s.kt)("p",null,"acc_type: Active - account already exists, and its code is deployed."),(0,s.kt)("p",null,"In the first to cases, the exchange might first transfer a small portion of the requested amount (~1 EVER) and request that the user deploys their contract. Upon the user's confirmation that the account is deployed, its status may be rechecked, and if it became active, the remaining amount of requested funds may be safely transferred."),(0,s.kt)("p",null,"If the account is already active, a small portion of the requested amount may be transferred to the user, and the user may be asked what amount they received (note: a small amount of the transfer, usually less than 0.05 EVER, will be spent on fees, so it's best to ask for the whole number of tokens transferred). If the amounts match, the rest of the requested funds may be transferred as well."),(0,s.kt)("h4",{id:"pin-code-verification"},"PIN code verification"),(0,s.kt)("p",null,"Additionally, for users that use the Surf app to store their tokens, PIN code verification is possible."),(0,s.kt)("p",null,"The following TONOS-CLI command may be used to send a transaction with an encrypted PIN code, which the user will be able to see in Surf:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'tonos-cli multisig send --addr <deposit_account_address> --dest <recipient_address> --purpose <"PIN_code"> --sign <path_to_keys_or_seed_phrase> --value *number*\n')),(0,s.kt)("p",null,"deposit_account_address - address of the deposit account address that tokens are sent from."),(0,s.kt)("p",null,"recipient_address - address of the account tokens are sent to."),(0,s.kt)("p",null,'"PIN_code" - accompanying message containing the PIN code. Only the recipient will be able to decrypt and read it. should be enclosed in double quotes.'),(0,s.kt)("p",null,"path_to_keys_or_seed_phrase - path to sender wallet key file of the corresponding seed phrase in quotes."),(0,s.kt)("p",null,"--value ",(0,s.kt)("em",{parentName:"p"},"number")," - value to be transferred (in tokens)."),(0,s.kt)("p",null,"Example:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'$ tonos-cli multisig send --addr 0:255a3ad9dfa8aa4f3481856aafc7d79f47d50205190bd56147138740e9b177f3 --dest 0:a4629d617df931d8ad86ed24f4cac3d321788ba082574144f5820f2894493fbc --purpose "339" --sign key.json --value 6\nConfig: /home/user/tonos-cli.conf.json\nConnecting to net.ton.dev\nGenerating external inbound message...\n\nMessageId: 62b1420ac98e586f29bf79bc2917a0981bb3f15c4757e8dca65370c19146e327\nExpire at: Thu, 13 May 2021 13:26:06 +0300\nProcessing... \nSucceeded.\nResult: {\n  "transId": "0"\n}.\n')),(0,s.kt)("h4",{id:"using-sdk-1"},"Using SDK"),(0,s.kt)("p",null,"You may integrate withdrawals from deposit account into your backend using SDK as well. A sample is available in this repository and an overview of the relevant part is given below."),(0,s.kt)("p",null,"In this sample JS SDK is used. Bindings for a large number of languages have been developed for SDK.\nThis example shows how to generate a withdrawal transaction from a Multisig wallet, using its sendTransaction method. Note, that if Multisig has multiple custodians, the transaction will have to be confirmed with the confirmTransaction method."),(0,s.kt)("p",null,"You may choose from which account (sender or recipient), the forward fees will be charged."),(0,s.kt)("p",null,"In this example tokens are withdrawn from the deposit account to the giver, that initially sponsored it. In a proper implementation, the account given by user should be used instead."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'...\nconsole.log(`Withdrawing 2 tokens from ${wallet.walletAddress} to ${giverAddress}...`);\nawait walletWithdraw(wallet, giverAddress, 1000000000);\n...\n\nasync function walletWithdraw(wallet, address, amount) {\n    const transactions = await runAndWaitForRecipientTransactions(wallet, "submitTransaction", {\n        dest: address,\n        value: amount,\n        bounce: false,\n        allBalance: false,\n        payload: "",\n    });\n    if (transactions.length > 0) {\n        console.log(`Recipient received transfer. The recipient\'s transaction is: ${transactions[0].id}`);\n    }\n}\n\nasync function runAndWaitForRecipientTransactions(account, functionName, input) {\n        const runResult = await account.client.processing.process_message({\n            message_encode_params: {\n                address: account.address,\n                abi: account.abi,\n                signer: account.signer,\n                call_set: {\n                    function_name: functionName,\n                    input,\n                },\n            },\n            send_events: false,\n        });\n    \n\n        const transactions = [];\n    \n\n// This step is only required if you want to know when the recipient actually receives their tokens.\n// In Everscale blockchain, transfer consists of 2 transactions (because the blockchain is asynchronous):\n//  1. Sender sends tokens - this transaction is returned by `Run` method\n//  2. Recipient receives tokens - this transaction can be caught with `query_transaction_tree method`\n// Read more about transactions and messages here\n// https://ton.dev/faq/blockchain-basic\n  for (const messageId of runResult.transaction.out_msgs) {\n       const tree = await account.client.net.query_transaction_tree({\n                        in_msg: messageId,\n                    });\n       transactions.push(...tree.transactions);\n  }\n  return transactions;\n}\n')),(0,s.kt)("h4",{id:"user-account-verification-with-sdk"},"User account verification with SDK"),(0,s.kt)("p",null,"Same as described above, users of the Surf app can be offered additional verification with a PIN code."),(0,s.kt)("p",null,"Below is a snippet of the SDK sample demonstrating how to generate a transaction with an encrypted comment. A PIN code can be transmitted to the user in this comment attached to a small amount of tokens, and only after the user provides the PIN code, thus proving they have access to their account, may the rest of the withdrawal amount be transferred."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre"},'// Prepare body with comment\n        // For that we need to prepare internal message with transferAbi and then extract body from it\n        const body = (await client.abi.encode_message_body({\n            abi: abiContract(transferAbi),\n            call_set: {\n                function_name: "transfer",\n                input: {\n                    comment: Buffer.from("My comment").toString("hex"),\n                },\n            },\n            is_internal: true,\n            signer: signerNone(),\n        })).body;\n\n    const multisig = new Account(MultisigContract, {\n        signer: signerKeys(keyPair),\n        client,\n    });\n\n    // Run \'submitTransaction\' method of multisig wallet\n    // Create run message\n\n    console.log("Call `submitTransaction` function");\n    const transactionInfo = (await multisig.run("submitTransaction", {\n        dest: recipient,\n        value: 100_000_000,\n        bounce: false,\n        allBalance: false,\n        payload: body,\n    }));\n    console.log(transactionInfo);\n    console.log("Transaction info:");\n\n    console.log("Id:");\n    console.log(transactionInfo.transaction.id);\n    console.log("messages:");\n    console.log(transactionInfo.out_messages);\n    const messages = transactionInfo.out_messages;\n\n    const decodedMessage1 = (await tonClient.abi.decode_message({\n        abi: abiContract(transferAbi),\n        message: messages[0],\n    }));\n\n    // Decode comment from hex to string\n    decodedMessage1.value.comment = Buffer.from(decodedMessage1.value.comment, "hex").toString("utf8");\n\n    console.log("Decoded message 1:", decodedMessage1.value);\n\n    const decodedMessage2 = (await tonClient.abi.decode_message({\n        abi: abiContract(multisigContractPackage.abi),\n        message: messages[1],\n    }));\n\n    console.log("Decoded message 2:", decodedMessage2);\n')),(0,s.kt)("blockquote",null,(0,s.kt)("p",{parentName:"blockquote"}," The documentation in Everscale repository is a community effort. Therefore, everyone can contribute with proposals for new topics, suggest new content elements, participate in editing, and provide ideas that will be of great help for network development.\nPlease be informed that our documentation can be ",(0,s.kt)("a",{parentName:"p",href:"https://github.com/everscale-org/docs/issues"},"edited via GitHub"),".",(0,s.kt)("br",{parentName:"p"}),"\n","Also please make sure to consult our rules and rewards policy via ",(0,s.kt)("a",{parentName:"p",href:"https://docs.everscale.network/contribute/hot-streams/documentations"},"this link"),".",(0,s.kt)("br",{parentName:"p"}),"\n","Feel free to join ",(0,s.kt)("a",{parentName:"p",href:"https://t.me/+C2IpQXWZtCwxYzEy"},"Everscale Documentation Development Telegram chat")," and ",(0,s.kt)("a",{parentName:"p",href:"https://t.me/+Vca1Gs6uPzIyNWVi"},"Everscale Developers Onboarding Telegram chat"),"!")))}f.isMDXComponent=!0}}]);